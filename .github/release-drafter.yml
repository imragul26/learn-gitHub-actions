name-template: "v$RESOLVED_VERSION"
tag-template: "v$RESOLVED_VERSION"

# Template for the release notes
template: |
  # v$RESOLVED_VERSION ($(date +'%Y-%m-%d'))
  
  $CATEGORIZED_COMMITS
  
  **Full Changelog**: https://github.com/$OWNER/$REPOSITORY/compare/$PREVIOUS_TAG...$RESOLVED_VERSION

# Custom template variables
template-variables:
  CATEGORIZED_COMMITS: $COMMITS_TEMPLATE

# Replacers to categorize commits and add emojis
replacers:
  - search: '\$COMMITS_TEMPLATE'
    replace: >-
      ${{
        const commitGroups = {
          feat: [],
          fix: [],
          docs: [],
          chore: [],
          refactor: [],
          perf: [],
          test: [],
          other: []
        };

        commits.forEach(commit => {
          const message = commit.message.trim();
          const shaShort = commit.sha.substring(0, 7);
          const author = commit.author ? ` (@${commit.author.login})` : '';
          const entry = `- ${message} [${shaShort}]${author}`;
          
          if (message.toLowerCase().startsWith('feat:') || message.toLowerCase().startsWith('feature:')) {
            commitGroups.feat.push(entry);
          } else if (message.toLowerCase().startsWith('fix:') || message.toLowerCase().startsWith('bug:')) {
            commitGroups.fix.push(entry);
          } else if (message.toLowerCase().startsWith('docs:') || message.toLowerCase().startsWith('documentation:')) {
            commitGroups.docs.push(entry);
          } else if (message.toLowerCase().startsWith('chore:')) {
            commitGroups.chore.push(entry);
          } else if (message.toLowerCase().startsWith('refactor:')) {
            commitGroups.refactor.push(entry);
          } else if (message.toLowerCase().startsWith('perf:') || message.toLowerCase().startsWith('performance:')) {
            commitGroups.perf.push(entry);
          } else if (message.toLowerCase().startsWith('test:')) {
            commitGroups.test.push(entry);
          } else {
            commitGroups.other.push(entry);
          }
        });

        let output = '';
        
        if (commitGroups.feat.length > 0) {
          output += '### 🚀 Features\n' + commitGroups.feat.join('\n') + '\n\n';
        }
        if (commitGroups.fix.length > 0) {
          output += '### 🐛 Bug Fixes\n' + commitGroups.fix.join('\n') + '\n\n';
        }
        if (commitGroups.perf.length > 0) {
          output += '### ⚡ Performance Improvements\n' + commitGroups.perf.join('\n') + '\n\n';
        }
        if (commitGroups.refactor.length > 0) {
          output += '### 🔧 Refactors\n' + commitGroups.refactor.join('\n') + '\n\n';
        }
        if (commitGroups.docs.length > 0) {
          output += '### 📚 Documentation\n' + commitGroups.docs.join('\n') + '\n\n';
        }
        if (commitGroups.test.length > 0) {
          output += '### ✅ Tests\n' + commitGroups.test.join('\n') + '\n\n';
        }
        if (commitGroups.chore.length > 0) {
          output += '### 📦 Chores\n' + commitGroups.chore.join('\n') + '\n\n';
        }
        if (commitGroups.other.length > 0) {
          output += '### 📋 Other Changes\n' + commitGroups.other.join('\n') + '\n\n';
        }

        return output.trim() || 'No significant changes.';
      }}

# Configuration
include-paths: []
exclude-labels: ["skip-changelog"]
sort-direction: ascending
sort-by: committed_date
