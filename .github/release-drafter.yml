name-template: "v$RESOLVED_VERSION"
tag-template: "v$RESOLVED_VERSION"

template: |
  ## What's Changed
  $CHANGES
  
  ## Commit Details
  $COMMIT_DETAILS

categories:
  - title: "🚨 Breaking Changes"
    labels: ["breaking-change"]
  - title: "✨ Features"
    labels: ["feature"]
  - title: "🐛 Bug Fixes"
    labels: ["bug"]
  - title: "🛠 Enhancements"
    labels: ["enhancement"]
  - title: "📦 Dependencies"
    labels: ["dependencies"]
    collapse-after: 2
  - title: "📋 Other Changes"
    labels: []
    # fallback bucket when PRs don't match above categories

# Extract commit messages for each PR
change-template: |
  - $TITLE$IS_MODULE – #$NUMBER
    $COMMIT_MESSAGES

# Custom template variable for commit messages
template-variables:
  IS_MODULE: $IS_MODULE_TEMPLATE
  COMMIT_MESSAGES: $COMMIT_MESSAGES_TEMPLATE

# Replacers for module labels and commit messages
replacers:
  - search: '\$IS_MODULE_TEMPLATE'
    replace: >-
      ${{
        contains(labels, 'origination') && ' (`origination`)' ||
        contains(labels, 'maintenance') && ' (`maintenance`)' ||
        contains(labels, 'testation') && ' (`testation`)' ||
        ''
      }}
  
  - search: '\$COMMIT_MESSAGES_TEMPLATE'
    replace: >-
      ${{
        commits = [];
        for (commit of commits) {
          commits.push('    - ' + commit.message.split('\n')[0]);
        }
        commits.length > 0 ? '\n' + commits.join('\n') : ''
      }}

# Configure commit extraction
include-paths: []
exclude-labels: []
sort-direction: ascending
sort-by: merged_at

# Additional configuration for commit details section
sections:
  - name: commit_details
    title: "## Commit Details"
    hidden: false
    labels: []
    body: |
      ${{
        const commitGroups = {};
        commits.forEach(commit => {
          const message = commit.message.split('\n')[0];
          const prMatch = message.match(/\(#(\d+)\)$/);
          if (prMatch) {
            const prNumber = prMatch[1];
            if (!commitGroups[prNumber]) {
              commitGroups[prNumber] = [];
            }
            commitGroups[prNumber].push(message);
          } else {
            // Direct commits without PR reference
            if (!commitGroups.direct) {
              commitGroups.direct = [];
            }
            commitGroups.direct.push(message);
          }
        });
        
        let output = '';
        Object.entries(commitGroups).forEach(([key, messages]) => {
          if (key === 'direct') {
            output += '### Direct Commits\n';
            messages.forEach(msg => {
              output += `- ${msg}\n`;
            });
          } else {
            output += `### PR #${key}\n`;
            messages.forEach(msg => {
              output += `- ${msg}\n`;
            });
          }
          output += '\n';
        });
        return output;
      }}
