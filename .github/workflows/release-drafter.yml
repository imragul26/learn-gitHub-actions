name: Generate Release Draft
on:
  pull_request:
    types: [closed]
    branches: [main, master]

jobs:
  generate-release-draft:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    
    steps:
    - name: Generate Release Notes
      id: generate_notes
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const CATEGORIES = {
            feat: { emoji: '‚ú®', title: 'Features' },
            fix: { emoji: 'üêõ', title: 'Bug Fixes' },
            docs: { emoji: 'üìö', title: 'Documentation' },
            style: { emoji: 'üé®', title: 'Styling' },
            refactor: { emoji: '‚ôªÔ∏è', title: 'Refactoring' },
            perf: { emoji: '‚ö°', title: 'Performance' },
            test: { emoji: 'üß™', title: 'Tests' },
            chore: { emoji: 'üîß', title: 'Chores' },
            ci: { emoji: 'üë∑', title: 'CI/CD' },
            build: { emoji: 'üì¶', title: 'Build' },
            revert: { emoji: '‚è™', title: 'Reverts' }
          };

          const COMMIT_PATTERN = /^(\w+)(\([^)]+\))?!?:\s*(.+)$/i;

          function categorizeMessage(message) {
            const match = message.match(COMMIT_PATTERN);
            if (match) {
              const category = match[1].toLowerCase();
              const description = match[3].trim();
              if (CATEGORIES[category]) {
                return { category, description };
              }
            }
            
            const messageLower = message.toLowerCase();
            for (const category of Object.keys(CATEGORIES)) {
              if (messageLower.includes(category)) {
                return { category, description: message };
              }
            }
            
            return { category: 'other', description: message };
          }

          // Get PR data
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number
          });

          // Get PR commits
          const { data: commits } = await github.rest.pulls.listCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number
          });

          // Process messages
          const categorizedNotes = Object.keys(CATEGORIES).reduce((acc, cat) => {
            acc[cat] = [];
            return acc;
          }, {});
          categorizedNotes.other = [];

          // Process PR title
          const prTitleResult = categorizeMessage(pr.title);
          if (prTitleResult.description) {
            categorizedNotes[prTitleResult.category].push(
              `- ${prTitleResult.description} (#${pr.number})`
            );
          }

          // Process commits
          commits.forEach(commit => {
            const message = commit.commit.message;
            if (message.startsWith('Merge')) return;
            
            const { category, description } = categorizeMessage(message);
            if (description) {
              categorizedNotes[category].push(`- ${description} (#${pr.number})`);
            }
          });

          // Build release notes
          let releaseNotes = '';
          for (const [category, config] of Object.entries(CATEGORIES)) {
            const notes = categorizedNotes[category];
            if (notes.length > 0) {
              releaseNotes += `### ${config.emoji} ${config.title}\n${notes.join('\n')}\n\n`;
            }
          }

          if (categorizedNotes.other.length > 0) {
            releaseNotes += `### üìù Other Changes\n${categorizedNotes.other.join('\n')}\n\n`;
          }

          if (releaseNotes) {
            releaseNotes += `**Author**: @${pr.user.login}\n`;
            releaseNotes += `**PR**: #${pr.number}\n`;
          }

          core.setOutput('release_notes', releaseNotes.trim());
          core.setOutput('release_version', 'v1.0.0'); // Simple version

    - name: Create Release Draft
      uses: softprops/action-gh-release@v1
      if: steps.generate_notes.outputs.release_notes != ''
      with:
        tag_name: ${{ steps.generate_notes.outputs.release_version }}
        name: Release ${{ steps.generate_notes.outputs.release_version }}
        body: ${{ steps.generate_notes.outputs.release_notes }}
        draft: true
        prerelease: false
