 name: Generate Commit-based Release Notes
  id: generate_notes
  run: |
    # Get current tag
    CURRENT_TAG="${{ github.ref_name }}"
    
    # Get previous tag
    PREVIOUS_TAG=$(git describe --tags --abbrev=0 "$CURRENT_TAG"^ 2>/dev/null || git rev-list --max-parents=0 HEAD 2>/dev/null || echo "")
    
    # Get commits between tags
    if [ -z "$PREVIOUS_TAG" ]; then
      COMMITS=$(git log --pretty=format:"%s|%an|%h" --reverse)
    else
      COMMITS=$(git log --pretty=format:"%s|%an|%h" "$PREVIOUS_TAG".."$CURRENT_TAG" --reverse)
    fi

    # Start building the release notes
    echo "# $CURRENT_TAG 🚀 Draft" > release_notes.md
    echo "" >> release_notes.md
    echo "## What's Changed 🌟" >> release_notes.md
    echo "" >> release_notes.md
    
    # Initialize arrays for each category
    declare -a features
    declare -a bugfixes
    declare -a documentation
    declare -a chores
    declare -a dependencies
    declare -a other
    
    # Process each commit
    while IFS= read -r commit_line; do
      IFS='|' read -r message author hash <<< "$commit_line"
      
      # Extract PR number and author from message if present
      pr_number=""
      author_username="$author"
      
      # Extract PR number from message (common GitHub patterns)
      if [[ $message =~ \(#([0-9]+)\) ]]; then
        pr_number="${BASH_REMATCH[1]}"
      fi
      
      # Extract author from message if mentioned
      if [[ $message =~ by @([^ ]+) ]]; then
        author_username="${BASH_REMATCH[1]}"
      fi
      
      # Clean the message
      clean_message=$(echo "$message" | sed -E 's/\(#[0-9]+\)//g' | sed -E 's/ by @[^ ]+//g' | sed -E 's/^[a-zA-Z]+:[[:space:]]*//' | xargs)
      
      # Format the entry
      entry=""
      if [ -n "$pr_number" ]; then
        entry="- **$clean_message** by @$author_username [#$pr_number](https://github.com/${{ github.repository }}/pull/$pr_number)"
      else
        entry="- **$clean_message** by @$author_username"
      fi
      
      # Categorize based on commit message
      lowercase_message=$(echo "$message" | tr '[:upper:]' '[:lower:]')
      
      if [[ $lowercase_message =~ ^(feat:|feature:|add:|new:) ]] || [[ $lowercase_message =~ feat\( ]]; then
        features+=("✨ $entry")
      elif [[ $lowercase_message =~ ^(fix:|bug:|patch:) ]] || [[ $lowercase_message =~ fix\( ]]; then
        bugfixes+=("🐛 $entry")
      elif [[ $lowercase_message =~ ^(docs:|documentation:) ]] || [[ $lowercase_message =~ docs\( ]]; then
        documentation+=("📚 $entry")
      elif [[ $lowercase_message =~ ^(chore:|build:|ci:|cd:|refactor:|style:|perf:|test:) ]]; then
        chores+=("🔧 $entry")
      elif [[ $lowercase_message =~ ^(deps:|dependencies:) ]]; then
        dependencies+=("📦 $entry")
      elif [[ ! $lowercase_message =~ ^(merge|revert) ]] && [[ ! $lowercase_message =~ ^Merge ]] && [[ ! $lowercase_message =~ ^Revert ]]; then
        other+=("📋 $entry")
      fi
      
    done <<< "$COMMITS"
    
    # Output categorized sections
    if [ ${#features[@]} -gt 0 ]; then
      echo "### ✨ Features" >> release_notes.md
      echo "" >> release_notes.md
      printf '%s\n' "${features[@]}" >> release_notes.md
      echo "" >> release_notes.md
    fi
    
    if [ ${#bugfixes[@]} -gt 0 ]; then
      echo "### 🐛 Bug Fixes" >> release_notes.md
      echo "" >> release_notes.md
      printf '%s\n' "${bugfixes[@]}" >> release_notes.md
      echo "" >> release_notes.md
    fi
    
    if [ ${#documentation[@]} -gt 0 ]; then
      echo "### 📚 Documentation" >> release_notes.md
      echo "" >> release_notes.md
      printf '%s\n' "${documentation[@]}" >> release_notes.md
      echo "" >> release_notes.md
    fi
    
    if [ ${#chores[@]} -gt 0 ]; then
      echo "### 🔧 Chores & Maintenance" >> release_notes.md
      echo "" >> release_notes.md
      printf '%s\n' "${chores[@]}" >> release_notes.md
      echo "" >> release_notes.md
    fi
    
    if [ ${#dependencies[@]} -gt 0 ]; then
      echo "### 📦 Dependencies" >> release_notes.md
      echo "" >> release_notes.md
      printf '%s\n' "${dependencies[@]}" >> release_notes.md
      echo "" >> release_notes.md
    fi
    
    if [ ${#other[@]} -gt 0 ]; then
      echo "### 📋 Other Changes" >> release_notes.md
      echo "" >> release_notes.md
      printf '%s\n' "${other[@]}" >> release_notes.md
      echo "" >> release_notes.md
    fi
    
    # Add statistics
    total_commits=$(echo "$COMMITS" | wc -l)
    echo "## 📊 Release Statistics" >> release_notes.md
    echo "" >> release_notes.md
    echo "- **Total commits**: $total_commits" >> release_notes.md
    echo "- **Contributors**: $(echo "$COMMITS" | cut -d'|' -f2 | sort -u | wc -l)" >> release_notes.md
    echo "" >> release_notes.md
    
    # Add footer
    echo "---" >> release_notes.md
    echo "*Generated automatically from commit messages* 🚀" >> release_notes.md
    
    # Set output
    RELEASE_BODY=$(cat release_notes.md)
    echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
    echo "$RELEASE_BODY" >> $GITHUB_ENV
    echo "EOF" >> $GITHUB_ENV
