name: Generate Release Notes

on:
  push:
    tags:
      - 'v*'

jobs:
  generate-release-notes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate Release Notes
      id: generate_notes
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0)
        
        # Get previous tag (if exists)
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 "$LATEST_TAG"^ 2>/dev/null || echo "")
        
        # Get commit messages since last tag or all commits if no previous tag
        if [ -z "$PREVIOUS_TAG" ]; then
          COMMITS=$(git log --pretty=format:"%s" --reverse)
        else
          COMMITS=$(git log --pretty=format:"%s" "$PREVIOUS_TAG".."$LATEST_TAG" --reverse)
        fi
        
        # Categorize commits with emojis
        echo "COMMIT_CATEGORIES<<EOF" >> $GITHUB_ENV
        echo "$COMMITS" | awk '
        BEGIN {
          categories["feat"] = "🚀 Features"
          categories["fix"] = "🐛 Bug Fixes"
          categories["docs"] = "📚 Documentation"
          categories["style"] = "💄 Code Style"
          categories["refactor"] = "♻️ Refactoring"
          categories["perf"] = "⚡ Performance"
          categories["test"] = "✅ Tests"
          categories["chore"] = "🔧 Chores"
          categories["ci"] = "👷 CI/CD"
          categories["build"] = "📦 Build"
          categories["revert"] = "⏪ Reverts"
          categories["security"] = "🔒 Security"
        }
        
        {
          # Default category
          category = "📝 Other Changes"
          emoji = "📝"
          
          # Check for conventional commit format
          if (match($0, /^([a-z]+)(\([^)]+\))?: /)) {
            type = substr($0, RSTART, RLENGTH)
            gsub(/[(:].*/, "", type)
            
            if (type in categories) {
              split(categories[type], cat_emoji, " ")
              category = cat_emoji[2]
              for (i=3; i<=length(cat_emoji); i++) category = category " " cat_emoji[i]
              emoji = cat_emoji[1]
            }
          }
          
          # Remove commit type prefix for cleaner message
          message = $0
          sub(/^[a-z]+(\([^)]+\))?: /, "", message)
          
          # Store in categories array
          categories_array[category][length(categories_array[category]) + 1] = emoji " " message
        }
        
        END {
          # Generate markdown output
          print "# Release Notes - '"$LATEST_TAG"'\n"
          
          if (PREVIOUS_TAG != "") {
            print "## Changes since " PREVIOUS_TAG "\n"
          }
          
          # Print categorized commits
          for (category in categories_array) {
            print "### " category "\n"
            for (i in categories_array[category]) {
              print "- " categories_array[category][i]
            }
            print ""
          }
          
          # Print uncategorized commits if any
          if ("📝 Other Changes" in categories_array) {
            print "### 📝 Other Changes\n"
            for (i in categories_array["📝 Other Changes"]) {
              print "- " categories_array["📝 Other Changes"][i]
            }
          }
        }
        ' > release_notes.md
        
        # Read the generated notes
        RELEASE_NOTES=$(cat release_notes.md)
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        echo "$RELEASE_NOTES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ${{ env.RELEASE_NOTES }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Display Generated Notes
      run: |
        echo "Generated Release Notes:"
        echo "------------------------"
        cat release_notes.md
